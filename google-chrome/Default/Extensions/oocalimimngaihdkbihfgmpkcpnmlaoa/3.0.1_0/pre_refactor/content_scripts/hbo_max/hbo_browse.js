var injectBrowseScript = function() {
    var tasks = null, tasksInFlight = 0;
    jQuery(window).load((function() {
        console.log("LOADED PAGE");
    }));
    var triggerCometRequest = function() {
        return new Promise((async (resolve, reject) => {
            try {
                console.log("trigger marker request"), document.querySelector("video") && document.querySelector("video")._dispNode && document.querySelector("video")._dispNode.position && (document.querySelector("video")._dispNode.position = document.querySelector("video")._dispNode.position - .1, 
                document.querySelector("video")._dispNode.position = document.querySelector("video")._dispNode.position + .1), 
                await (milliseconds = 200, function(result) {
                    return new Promise((function(resolve, reject) {
                        setTimeout((function() {
                            resolve(result);
                        }), milliseconds);
                    }));
                })(), resolve();
            } catch (e) {
                resolve();
            }
            var milliseconds;
        }));
    };
    console.log("Injected HBO Browse Script");
    var onmessage = function(event) {
        event.source == window && event.data && "teardown" === event.data.type && (console.log("Browse teardown"), 
        window.removeEventListener("TPBrowse", browseInteraction), window.removeEventListener("message", onmessage), 
        window.telepartyBrowseLoaded = !1);
    };
    window.addEventListener("message", onmessage, !1);
    var browseInteraction = function(event) {
        var task;
        "TOGGLE_LIST" === event.detail.type && (console.log("Received toggle list event: "), 
        task = triggerCometRequest, 0 === tasksInFlight && (tasks = Promise.resolve()), 
        tasksInFlight += 1, tasks = tasks.then(task).then((function() {
            tasksInFlight -= 1;
        })));
    };
    window.addEventListener("TPBrowse", browseInteraction, !1);
    var script, s;
    window.videoIdScriptLoaded || (script = '\n    if(!window.videoIdScriptLoaded) {\n        console.log("Browse script loaded");\n        window.videoIdScriptLoaded = true;\n        \n        //adds a callback to the browser default XMLHttpRequest implementation\n        var addXMLRequestCallback = function(callback){\n            var oldSend, i;\n            if( XMLHttpRequest.callbacks ) {\n                // we\'ve already overridden send() so just add the callback\n                XMLHttpRequest.callbacks.push( callback );\n            } else {\n                // create a callback queue\n                XMLHttpRequest.callbacks = [callback];\n                // store the native send()\n                oldSend = XMLHttpRequest.prototype.send;\n                // override the native send()\n                XMLHttpRequest.prototype.send = function(data){\n                    // process the callback queue\n                    // the xhr instance is passed into each callback but seems pretty useless\n                    // you can\'t tell what its destination is or call abort() without an error\n                    // so only really good for logging that a request has happened\n                    // I could be wrong, I hope so...\n                    // EDIT: I suppose you could override the onreadystatechange handler though\n                    for( i = 0; i < XMLHttpRequest.callbacks.length; i++ ) {\n                        XMLHttpRequest.callbacks[i]( this , data);\n                    }\n                    // call the native send()\n                    // console.log("send data: " + JSON.stringify(data));\n                    sendDataCallback(data);\n                    oldSend.apply(this, arguments);\n                }\n            }\n        }\n        \n        window.videoIds = {};\n        \n        var getVideoTitle = function () {\n            try {\n              if (window.location.href.includes(\'hbomax\')) {\n                // var videoContainer = document.querySelector(\'video\') && document.querySelector(\'video\').parentNode.parentNode.parentNode.parentNode;\n                // if (videoContainer) {\n                //   return videoContainer.nextElementSibling.querySelector("span[style*=\'street2_book\']").nextElementSibling.innerText\n                // } \n                return jQuery("[style*=\'metadata_pipe.png\']").parent().next().children().children()[1].innerText;        \n              }\n              // else {\n              //   return document.querySelector("[style*=\'street2_thin\']").children[1].innerText;\n              // }\n            } catch(e) {\n              return undefined;\n            }\n        };\n\n        // listen to request payloads on hbo marker posts\n        var sendDataCallback = function(vData) {\n            // console.log(vData);\n            if(vData !== undefined && typeof vData === "string") {\n                var vJsonData = JSON.parse(vData);\n                if(vJsonData.hasOwnProperty("events") && vJsonData["events"].length === 1 && vJsonData["events"][0].hasOwnProperty("cutId")) {\n                    var epId = vJsonData["events"][0]["cutId"];\n                    // var epTitle = getVideoTitle(); // does not include season info, undefined if not found\n\n                    console.log("telegraph ep id:" + (epId));\n                    window.postMessage({ type: "EPISODE_ID", videoId: epId}, "*");     \n                }\n\n                if(vJsonData.hasOwnProperty("cutId")) {\n                    var epId = JSON.parse(vData).cutId;\n                    // var epTitle = getVideoTitle(); // does not include season info, undefined if not found\n\n                    console.log("data/id/title:" + (epId) + "/ " + epTitle + "/" + vData);\n                    window.postMessage({ type: "EPISODE_ID", videoId: epId}, "*");     \n                }  \n\n            }          \n        }\n\n        var xhrLoad = function(xhrLoadEvent) {\n            // if(xhrLoadEvent.currentTarget.responseURL && xhrLoadEvent.currentTarget.responseURL.includes("https://comet.api.hbo.com/watchlist")) {\n            //     const url = xhrLoadEvent.currentTarget.responseURL;\n            //     const episodeId = url.split("%3A")[3];\n            //     window.postMessage({ type: "EPISODE_ID", episodeId: episodeId}, "*");\n            // }\n            try {\n                // console.log(xhrLoadEvent.currentTarget);\n\n                if(xhrLoadEvent.currentTarget.responseURL && xhrLoadEvent.currentTarget.responseURL.includes("https://comet.api.hbo.com/content") && xhrLoadEvent.currentTarget.responseText) {\n                    Promise.resolve(xhrLoadEvent.currentTarget.responseText)\n                    .then(JSON.parse)\n                    .then(function(responseData) {\n                            var updated = false;\n                            for (var episodeData of responseData)\n                            {\n                                        if (responseData.length == 1 && episodeData.id && episodeData.id.includes(\'episode\')) {\n                                            var episodeId = episodeData.id.split(\'episode:\')[1];\n                                            window.postMessage({ type: "EPISODE_ID", videoId: episodeId}, "*");\n                                            console.log("Found new Episode Id: " + episodeId);\n                                            if (episodeData.body.manifests) {\n                                                for (var manifest of episodeData.body.manifests) {\n                                                    var videoId = manifest.videoId;\n                                                    window.videoIds[videoId] = episodeId;\n                                                }\n                                                updated = true;\n                                                console.log("Found Episode Id: " + episodeId);\n                                            } else {\n                                                console.log("NO MANIFESTS: " + JSON.stringify(responseData));\n                                            }\n                                        }\n                                        if(episodeData.id && episodeData.id.includes(\'episode\') && episodeData.body.titles) {\n                                                // console.log(\'found a proper episodeId & title!\');\n                                                // console.log(episodeData);\n                                                var episodeTitle = episodeData.body.titles.full;\n                                                var seriesName = episodeData.body.seriesTitles.full\n                                                var key = seriesName+":"+episodeTitle\n                                                const episodeId = episodeData.id.split(\':\')[3];\n                                                window.videoIds[key] = episodeId;\n                                                updated = true;\n                                        }\n                                    \n                            }\n                            if (updated) {\n                                window.postMessage({ type: "EPISODE_ID", videoIds: JSON.stringify(window.videoIds)}, "*");\n                            }\n                        });\n                }\n            } catch (e) {\n                console.log("BIG ERROR: " + e);\n            }\n        }\n             \n        // e.g.\n        addXMLRequestCallback( function( xhr ) {\n            // console.log(xhr);\n            xhr.addEventListener("load", xhrLoad); \n        });\n        \n        var videoIdContainer = document.createElement(\'script\');\n        videoIdContainer.className = \'videoIdContainer\'\n        videoIdContainer.textContent = \'\';\n        (document.head||document.documentElement).appendChild(videoIdContainer);   \n    }\n    ', 
    (s = document.createElement("script")).textContent = script, (document.head || document.documentElement).after(s), 
    console.log("Script Injected"));
};

window.telepartyBrowseLoaded || (window.telepartyBrowseLoaded = !0, injectBrowseScript());